name: Build

on:
  push:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'

jobs:
  Build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # see: https://github.com/actions/virtual-environments
          - {
            name: "Ubuntu / GCC 10",
            os: ubuntu-20.04,
            config: Release,
            cxx_standard: 20,
            cmake_extra_args: "-DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10  -DCMAKE_CXX_FLAGS=\"-O2\"",
            sudocmd: "sudo",
            artifact_name: "Linux",
            cores: 2,
          }
          - {
            name: "Mac OS / Clang 11",
            os: macos-11.0,
            config: Release,
            cxx_standard: 20,
            cmake_extra_args: "-DCMAKE_C_COMPILER=/usr/local/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/bin/clang++  -DCMAKE_CXX_FLAGS=\"-O2\"",
            sudocmd: "sudo",
            artifact_name: "MacOSX",
            cores: 4,
          }
    steps:
      - uses: actions/checkout@v2
      - name: Update GCC
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          sudo apt-get install -y g++-10 g++-10-multilib
          name=CC::gcc-10
          name=CXX::g++-10
      - name: Update Clang
        if: matrix.config.os == 'macos-11.0'
        run: |
          curl --output clang.tar.xz -L https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz
          mkdir clang
          tar -xvJf clang.tar.xz -C clang
          cd clang/clang+llvm-11.0.0-x86_64-apple-darwin
          sudo cp -R * /usr/local/
          export CC=/usr/local/bin/clang
          export CXX=/usr/local/bin/clang++
      - name: Install elements dependencies
        id: cmake_and_ninja
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows")
            execute_process(COMMAND choco install ninja)
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            execute_process(COMMAND sudo apt-get update)
            execute_process(COMMAND sudo apt-get install libcairo2-dev)
            execute_process(COMMAND sudo apt-get install libgtk-3-dev)
            execute_process(COMMAND sudo apt-get install ninja-build)
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            execute_process(COMMAND brew install pkg-config)
            execute_process(COMMAND brew install cairo)
            execute_process(COMMAND brew install fontconfig)
            execute_process(COMMAND brew install ninja)
          endif()
      - name: Create Work Dir
        run: mkdir build
      - name: Configure Build Script
        working-directory: ./build
        run: |
          cmake .. ${{ matrix.config.cmake_extra_args }} -DCMAKE_BUILD_TYPE=${{ matrix.config.config }}
      - name: Build All Targets
        working-directory: ./build
        run: cmake --build . -j ${{ matrix.config.cores }} --config ${{ matrix.config.config }}
      - name: Test
        working-directory: ./build
        run: ctest -j ${{ matrix.config.cores }} -C ${{ matrix.config.config }}